#+title: Emacs Configuration
#+author: hectorgrey

* Basic Configuration

This is a basic configuration, to be separated out into multiple source blocks later.

** Custom Variable File

#+begin_src elisp
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)
#+end_src

** Revert Buffer on File Change

#+begin_src elisp
  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers t)
#+end_src

** User Interface

#+begin_src elisp
  (global-display-line-numbers-mode 1)

  (setq use-dialog-box nil)
  (setq inhibit-startup-message t)
  (setq make-backup-files nil)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (save-place-mode 1)
  (setq-default tab-width 4)
#+end_src

** Theme

#+begin_src elisp
  (setq modus-themes-bold-constructs t)
  (setq modus-themes-italic-constructs t)
  (setq modus-themes-mixed-fonts t)
  (setq modus-themes-headings
	'((t . (variable-pitch rainbow 1.5))))
  (setq modus-themes-common-palette-overrides
	'((border-mode-line-active bg-mode-line-active)
	  (border-mode-line-inactive bg-mode-line-inactive)))
  (load-theme 'modus-vivendi)
#+end_src

* Packages

#+begin_src elisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

  (package-initialize)
#+end_src

** Magit

Magit is a git UI within Emacs.  It is very easy to use, but may struggle with ssh
connections if not set up correctly.

#+begin_src elisp
  (use-package magit
    :ensure t)
#+end_src

** Smart Tabs

Smart Tabs allow Tabs to be used for indentation, and spaces to be used for alignment.
This is my preferred way of indenting, as it is more accessible for people with different
vision needs.  This is currently commented out due to issues with the package.

#+begin_src elisp
  ;(use-package smart-tabs-mode
  ;  :diminish
  ;  :ensure t)
#+end_src

** Evil Mode

Evil Mode is a reimplementation of vim written in elisp - for those who like the features
of emacs but prefer the modal editing of vim, this is an ideal compromise.  Currently,
~(evil-mode 1)~ is commented out to allow the default emacs bindings - to enable Evil Mode
on startup, uncomment that line.  To enable it within an emacs session, press ~M-x~ and
use the evil-mode command.  Use the same command again to disable it.

#+begin_src elisp
  (use-package evil
    :diminish
    :ensure t)
  ;(evil-mode 1)
#+end_src

** Ivy

Ivy is a collection of completion tools for finding files, working with buffers, and other
such stuff.  It makes working with emacs significantly easier.

#+begin_src elisp
  (use-package ivy
    :diminish
    :ensure t
    :bind (("C-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-j" . ivy-next-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-j" . ivy-next-line)
	   ("C-d" . ivy-reverse-i-search-kill)))
  (ivy-mode 1)
#+end_src

** Which-Key

Which-Key is designed to help you get used to the many key bindings in emacs - after
pressing ~C-x~, ~C-h~, ~Esc~, or ~C-c~, this package will display a popup displaying the
various things you can press next and what they do.

#+begin_src elisp
  (use-package which-key
    :diminish
    :ensure t)
  (which-key-mode 1)
#+end_src

** Programming

*** DAP

This plugins are to allow programmers to use DAP debugging functionality.

#+begin_src elisp
  (use-package dap-mode
	:diminish
	:ensure t)
#+end_src

*** LSP

These LSP plugins are designed to allow programmers to make use of Language Server
Protocol functionality when programming.

#+begin_src elisp
  (use-package lsp-mode
	:diminish
	:ensure t
	:init
	(setq lsp-keymap-prefix "C-c l")
	:hook ((csharp-mode . lsp)
		   (c-mode . lsp)
		   (c++-mode . lsp)
		   (js-mode . lsp)
		   (json-mode . lsp)
		   (html-mode . lsp)
		   (css-mode . lsp)
		   (sh-mode . lsp)
		   (lsp-mode . lsp-enable-which-key-integration))
	:commands lsp)

  (use-package lsp-ui
	:diminish
	:ensure t
	:commands lsp-ui-mode)

  (use-package lsp-ivy
	:diminish
	:ensure t
	:commands lsp-ivy-workspace-symbol)
#+end_src

*** Treesitter

This is where the various treesitter grammars are located and installed.  The commented
line installs all listed grammars; it is commented out to avoid all of the grammars being
re-installed every time emacs launches.

#+begin_src elisp
  (setq treesit-language-source-alist
		'((c "https://github.com/tree-sitter/tree-sitter-c")
		  (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
		  (c-sharp "https://github.com/tree-sitter/tree-sitter-c-sharp")
		  (html "https://github.com/tree-sitter/tree-sitter-html")
		  (javascript "https://github.com/tree-sitter/tree-sitter-javascript")
		  (css "https://github.com/tree-sitter/tree-sitter-css")
		  (json "https://github.com/tree-sitter/tree-sitter-json")
		  (rust "https://github.com/tree-sitter/tree-sitter-rust")))

  ;(mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist))
#+end_src

*** Languages

**** C/C++

#+begin_src elisp
  (add-to-list 'major-mode-remap-alist '(c-mode . c-ts-mode))
  (add-to-list 'major-mode-remap-alist '(c++-mode . c++-ts-mode))
  (add-to-list 'major-mode-remap-alist '(c-or-c++-mode . c-or-c++-ts-mode))
#+end_src

**** C#

#+begin_src elisp
  (add-to-list 'major-mode-remap-alist '(csharp-mode . csharp-ts-mode))
#+end_src

**** JavaScript/JSON

**** CSS

**** HTML

**** SH

**** Rust

#+begin_src elisp
  (use-package rust-mode
	:ensure t
	:init
	(setq rust-mode-treesitter-derive t))
#+end_src
